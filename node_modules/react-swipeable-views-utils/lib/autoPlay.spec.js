"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _sinon = require("sinon");

var _chai = require("chai");

var _autoPlay = _interopRequireDefault(require("./autoPlay"));

var _ref = _react.default.createElement("div", null);

var Empty = function Empty() {
  return _ref;
};

var AutoPlaySwipeableViews = (0, _autoPlay.default)(Empty);

var _ref2 = _react.default.createElement(AutoPlaySwipeableViews, null, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'));

var _ref3 = _react.default.createElement(AutoPlaySwipeableViews, {
  interval: 100
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref4 = _react.default.createElement(AutoPlaySwipeableViews, {
  interval: 100
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref5 = _react.default.createElement(AutoPlaySwipeableViews, {
  interval: 100,
  direction: "decremental"
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'), _react.default.createElement("div", null, 'slide n°4'), _react.default.createElement("div", null, 'slide n°5'));

var _ref6 = _react.default.createElement("div", null, 'slide n°1');

var _ref7 = _react.default.createElement("div", null, 'slide n°2');

var _ref8 = _react.default.createElement("div", null, 'slide n°3');

var _ref9 = _react.default.createElement("div", null, 'slide n°4');

var _ref10 = _react.default.createElement("div", null, 'slide n°5');

var _ref11 = _react.default.createElement(AutoPlaySwipeableViews, {
  slideCount: 2,
  interval: 100
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'));

var _ref12 = _react.default.createElement(AutoPlaySwipeableViews, {
  autoplay: true,
  interval: 100
}, _react.default.createElement("div", null, 'slide n°1'), _react.default.createElement("div", null, 'slide n°2'), _react.default.createElement("div", null, 'slide n°3'));

describe('autoPlay', function () {
  var wrapper;
  afterEach(function () {
    wrapper.unmount(); // Unmount to clear the setInterval of the autoPlay HOC.
  });
  describe('static', function () {
    beforeEach(function () {
      wrapper = (0, _enzyme.shallow)(_ref2);
    });
    describe('prop: children', function () {
      it('should start at the beginning', function () {
        _chai.assert.strictEqual(wrapper.state().index, 0, 'Should start at the beginning.');
      });
    });
    describe('prop: onChangeIndex', function () {
      it('should be called with the right arguments', function () {
        var handleChangeIndex = (0, _sinon.spy)();
        wrapper.setProps({
          index: 0,
          onChangeIndex: handleChangeIndex
        });
        wrapper.find(Empty).simulate('changeIndex', 1, 0);

        _chai.assert.deepEqual(handleChangeIndex.args, [[1, 0]]);

        _chai.assert.strictEqual(wrapper.state().index, 0, 'should not update the state index');
      });
    });
    describe('uncontrolled', function () {
      it('should update the state index when swiping', function () {
        wrapper.find(Empty).simulate('changeIndex', 1, 0);

        _chai.assert.strictEqual(wrapper.state().index, 1, 'should update the state index');
      });
    });
  });
  describe('interval', function () {
    describe('prop: interval', function () {
      var clock;
      before(function () {
        clock = (0, _sinon.useFakeTimers)();
      });
      after(function () {
        clock.restore();
      });
      it('should be able to update the interval', function () {
        wrapper = (0, _enzyme.mount)(_ref3); // Disturb the interval.

        clock.tick(150);
        wrapper.setProps({
          interval: 200
        });

        _chai.assert.strictEqual(wrapper.state().index, 1, 'Should have the right index.');

        clock.tick(250);

        _chai.assert.strictEqual(wrapper.state().index, 2, 'Should have the right index.');

        wrapper.setProps({
          interval: 200
        });
        clock.tick(400);

        _chai.assert.strictEqual(wrapper.state().index, 4, 'Should have the right index.');
      });
    });
    describe('prop: direction', function () {
      it('should increment the index', function (done) {
        wrapper = (0, _enzyme.mount)(_ref4);
        setTimeout(function () {
          _chai.assert.strictEqual(wrapper.state().index, 2, 'Should have the right index.');

          done();
        }, 250);
      });
      it('should decrement the index', function (done) {
        wrapper = (0, _enzyme.mount)(_ref5);
        setTimeout(function () {
          _chai.assert.strictEqual(wrapper.state().index, 3, 'Should have the right index.');

          done();
        }, 250);
      });
    });
    describe('prop: onChangeIndex', function () {
      it('should be called each time by the interval', function (done) {
        var handleChangeIndex = (0, _sinon.spy)();
        wrapper = (0, _enzyme.mount)(_react.default.createElement(AutoPlaySwipeableViews, {
          interval: 100,
          onChangeIndex: handleChangeIndex
        }, _ref6, _ref7, _ref8, _ref9, _ref10));
        setTimeout(function () {
          _chai.assert.strictEqual(handleChangeIndex.callCount, 2, 'Should be called the right number of time.');

          _chai.assert.deepEqual(handleChangeIndex.args, [[1, 0], [2, 1]]);

          done();
        }, 250);
      });
    });
    describe('prop: slideCount', function () {
      it('should use the slideCount to compute the index limit', function (done) {
        wrapper = (0, _enzyme.mount)(_ref11);
        setTimeout(function () {
          _chai.assert.strictEqual(wrapper.state().index, 0, 'Should go back to the beginning.');

          done();
        }, 250);
      });
    });
    describe('prop: autoplay', function () {
      it('should not increment when disabled', function (done) {
        wrapper = (0, _enzyme.mount)(_ref12);
        setTimeout(function () {
          _chai.assert.strictEqual(wrapper.state().index, 1);

          wrapper.setProps({
            autoplay: false
          });
        }, 150);
        setTimeout(function () {
          _chai.assert.strictEqual(wrapper.state().index, 1);

          done();
        }, 300);
      });
    });
  });
});