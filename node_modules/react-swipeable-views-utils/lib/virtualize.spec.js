"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _chai = require("chai");

var _enzyme = require("enzyme");

var _sinon = require("sinon");

var _virtualize = _interopRequireDefault(require("./virtualize"));

/* eslint-disable react/no-multi-comp */
var _ref = _react.default.createElement("div", null);

var Empty = function Empty() {
  return _ref;
};

var VirtualizeSwipeableViews = (0, _virtualize.default)(Empty);

var slideRenderer = function slideRenderer(params) {
  var key = params.key;
  return _react.default.createElement("div", {
    key: key
  });
};

var _ref2 = _react.default.createElement(VirtualizeSwipeableViews, {
  overscanSlideAfter: 1,
  slideRenderer: slideRenderer
});

var _ref3 = _react.default.createElement(VirtualizeSwipeableViews, {
  overscanSlideBefore: 1,
  slideRenderer: slideRenderer
});

var _ref4 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer
});

var _ref5 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer
});

var _ref6 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer
});

var _ref7 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer
});

var _ref8 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer,
  slideCount: 10
});

var _ref9 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer,
  slideCount: 10
});

var _ref10 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer,
  index: 8,
  slideCount: 10
});

var _ref11 = _react.default.createElement(VirtualizeSwipeableViews, {
  slideRenderer: slideRenderer,
  slideCount: 3
});

var _ref12 = _react.default.createElement(VirtualizeSwipeableViews, {
  index: 1,
  slideRenderer: slideRenderer
});

var _ref13 = _react.default.createElement(VirtualizeSwipeableViews, {
  index: 9,
  slideRenderer: slideRenderer
});

var _ref14 = _react.default.createElement(VirtualizeSwipeableViews, {
  index: 0,
  slideRenderer: slideRenderer
});

describe('virtualize', function () {
  describe('prop: overscanSlideAfter', function () {
    it('should update the window', function () {
      var wrapper = (0, _enzyme.shallow)(_ref2);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 3,
        indexStart: -3,
        indexStop: 1
      });
    });
  });
  describe('prop: overscanSlideBefore', function () {
    it('should update the window', function () {
      var wrapper = (0, _enzyme.shallow)(_ref3);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 1,
        indexStart: -1,
        indexStop: 2
      });
    });
  });
  describe('window', function () {
    it('should use a correct window when mounting', function () {
      var wrapper = (0, _enzyme.shallow)(_ref4);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 3,
        indexStart: -3,
        indexStop: 2
      });
    });
    it('should update the state when swipping forward', function () {
      var wrapper = (0, _enzyme.shallow)(_ref5);
      wrapper.find(Empty).simulate('changeIndex', 4, 3);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 1,
        indexContainer: 4,
        indexStart: -3,
        indexStop: 3
      });

      wrapper.instance().setWindow();

      _chai.assert.deepEqual(wrapper.state(), {
        index: 1,
        indexContainer: 3,
        indexStart: -2,
        indexStop: 3
      });
    });
    it('should update the state when swipping backward', function () {
      var wrapper = (0, _enzyme.shallow)(_ref6);
      wrapper.find(Empty).simulate('changeIndex', 2, 3);

      _chai.assert.deepEqual(wrapper.state(), {
        index: -1,
        indexContainer: 2,
        indexStart: -3,
        indexStop: 2
      });

      wrapper.instance().setWindow();

      _chai.assert.deepEqual(wrapper.state(), {
        index: -1,
        indexContainer: 3,
        indexStart: -4,
        indexStop: 1
      });
    });
    it('should update the state when the transition if finished', function (done) {
      var wrapper = (0, _enzyme.shallow)(_ref7);
      wrapper.find(Empty).simulate('changeIndex', 2, 3);

      _chai.assert.deepEqual(wrapper.state(), {
        index: -1,
        indexContainer: 2,
        indexStart: -3,
        indexStop: 2
      });

      wrapper.find(Empty).simulate('transitionEnd');
      setTimeout(function () {
        _chai.assert.deepEqual(wrapper.state(), {
          index: -1,
          indexContainer: 3,
          indexStart: -4,
          indexStop: 1
        });

        done();
      }, 0);
    });
  });
  describe('prop: slideCount', function () {
    it('should use a correct window when mounting', function () {
      var wrapper = (0, _enzyme.shallow)(_ref8);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 0,
        indexStart: 0,
        indexStop: 2
      });
    });
    it('should update the state when swipping forward', function () {
      var wrapper = (0, _enzyme.shallow)(_ref9);
      wrapper.find(Empty).simulate('changeIndex', 1, 0);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 1,
        indexContainer: 1,
        indexStart: 0,
        indexStop: 3
      });

      wrapper.instance().setWindow();

      _chai.assert.deepEqual(wrapper.state(), {
        index: 1,
        indexContainer: 1,
        indexStart: 0,
        indexStop: 3
      });
    });
    it('should no go behond the bounds', function () {
      var wrapper = (0, _enzyme.shallow)(_ref10);
      wrapper.find(Empty).simulate('changeIndex', 4, 3);
      wrapper.setProps({
        index: 9
      });

      _chai.assert.deepEqual(wrapper.state(), {
        index: 9,
        indexContainer: 4,
        indexStart: 5,
        indexStop: 9
      });

      wrapper.instance().setWindow();

      _chai.assert.deepEqual(wrapper.state(), {
        index: 9,
        indexContainer: 3,
        indexStart: 6,
        indexStop: 9
      });
    });
    it('should work with a small slideCount', function () {
      var wrapper = (0, _enzyme.shallow)(_ref11);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 0,
        indexStart: 0,
        indexStop: 2
      });
    });
  });
  describe('prop: index', function () {
    it('should be able to control the component', function () {
      var wrapper = (0, _enzyme.shallow)(_ref12);

      _chai.assert.deepEqual(wrapper.state(), {
        index: 1,
        indexContainer: 3,
        indexStart: -2,
        indexStop: 3
      });

      wrapper.setProps({
        index: 3
      });

      _chai.assert.deepEqual(wrapper.state(), {
        index: 3,
        indexContainer: 5,
        indexStart: -2,
        indexStop: 4
      });

      wrapper.instance().setWindow();

      _chai.assert.deepEqual(wrapper.state(), {
        index: 3,
        indexContainer: 3,
        indexStart: 0,
        indexStop: 5
      });
    });
    it('should be able to widen the window when going back', function () {
      var wrapper = (0, _enzyme.shallow)(_ref13);
      wrapper.setProps({
        index: 0
      });

      _chai.assert.deepEqual(wrapper.state(), {
        index: 0,
        indexContainer: 0,
        indexStart: 0,
        indexStop: 11
      });
    });
    it('should be able to widen the window when going forward', function () {
      var wrapper = (0, _enzyme.shallow)(_ref14);
      wrapper.setProps({
        index: 9
      });

      _chai.assert.deepEqual(wrapper.state(), {
        index: 9,
        indexContainer: 12,
        indexStart: -3,
        indexStop: 9
      });
    });
  });
  describe('prop: onChangeIndex', function () {
    it('should be called with the right arguments', function () {
      var handleChangeIndex = (0, _sinon.spy)();
      var wrapper = (0, _enzyme.shallow)(_react.default.createElement(VirtualizeSwipeableViews, {
        index: 10,
        slideRenderer: slideRenderer,
        onChangeIndex: handleChangeIndex
      }));
      wrapper.find(Empty).simulate('changeIndex', 1, 0);

      _chai.assert.deepEqual(handleChangeIndex.args, [[11, 10]]);

      _chai.assert.strictEqual(wrapper.state().index, 10, 'should not update the state index');
    });
  });
});